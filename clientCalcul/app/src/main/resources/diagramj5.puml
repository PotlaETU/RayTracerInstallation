@startuml
class sae101.decorateur.DecoRender {
- IRender iRender
+ void render()
}
class sae101.calculColor.BlinnPhongColorCal {
+ Color calculateColor(Sphere,Scene,Point)
}
class sae101.parser.Camera {
- Point lookFrom
- Point lookAt
- Vector up
- int fov
+ Vector getW()
+ Vector getU()
+ Vector getV()
+ double getFovR()
+ double getPixelHeight()
+ Point getLookFrom()
+ Point getLookAt()
+ Vector getUp()
+ int getFov()
+ void setFov(int)
+ String toString()
}
interface sae101.parser.scene.Builder {
~ void setCamera(Camera)
~ void setDimensions(int,int)
~ void addLight(Light)
~ void addObject(SceneObjects)
~ Scene build()
}
interface sae101.shadow.IShadow {
+ boolean request()
}
class sae101.parser.light.DirectionalLight {
~ Vector direction
+ Vector getDirection()
+ Vector getLdir(Point)
}
class sae101.parser.scene.Scene {
- File output
- Camera camera
- int height
- int width
- List<Light> light
- List<SceneObjects> sceneobj
- List<Color> colors
- Color ambient
- List<Point> points
- boolean shadow
+ File getOutput()
+ Camera getCamera()
+ List<Light> getLight()
+ List<SceneObjects> getSceneobj()
+ int getHeight()
+ List<Color> getColors()
+ int getWidth()
+ Color getAmbient()
+ Point getPoint(int)
+ List<Sphere> getSphere()
}
class sae101.parser.objects.Sphere {
- double radius
- Point position
+ double getRadius()
+ Point getPosition()
+ void setPosition(Point)
}
class sae101.parser.scene.SceneBuilder {
- File output
- Camera camera
- int height
- int width
- List<Light> lights
- List<SceneObjects> sceneObjs
- Color ambient
- Color diffuse
- Color specular
- int shininess
- int maxverts
- List<Point> points
- List<Color> colors
- boolean shadow
+ void setOutput(File)
+ File getOutput()
+ void setCamera(Camera)
+ void setDimensions(int,int)
+ boolean getShadow()
+ void setShadow(boolean)
+ void setAmbient(Color)
+ void setDiffuse(Color)
+ void setSpecular(Color)
+ void setShininess(int)
+ void setMaxverts(int)
+ int getMaxverts()
+ int getShininess()
+ Color getSpecular()
+ Color getDiffuse()
+ Color getAmbient()
+ Point getPoint(int)
+ SceneObjects getObj(int)
+ void addLight(Light)
+ void addPoint(Point)
+ void addObject(SceneObjects)
+ Scene build()
}
class sae101.parser.objects.Triangle {
- Point a
- Point b
- Point c
- Vector normal
+ Vector getNTriangle()
+ boolean isInTriangle(Point)
}
interface sae101.calculColor.IFormLambert {
~ Color calculateColor(Sphere,Scene,Point)
}
class sae101.parser.Parser {
+ {static} SceneBuilder sceneBuilder
- BufferedReader in
+ Scene build()
+ {static} SceneBuilder getSceneBuilder()
}
abstract class sae101.parser.light.Light {
- Color color
+ Color getColor()
+ void setColor(Color)
+ {abstract}Vector getLdir(Point)
}
class sae101.parser.light.PointLight {
~ Point point
+ Point getPoint()
+ Vector getLdir(Point)
}
class sae101.calculColor.LambertColorCal {
+ Color calculateColor(Sphere,Scene,Point)
}
class sae101.raytracer.RayTracer {
- Scene scene
- LambertColorCal lambertColorCal
- int imgHeight
- int imgWidth
- Camera camera
- Sphere currentSphere
+ double getPixelWidth()
+ double getPixelHeight()
+ double getRealHeight()
+ double getRealWidth()
+ void setCurrentSphere(Sphere)
+ void view()
+ double getT(Vector)
+ Point getP(int,int)
+ Vector getN(int,int)
+ Vector getD(int,int)
}
class sae101.calculColor.BaseColorCal {
+ Color calculateColor(Sphere,Scene,Point)
}
class sae101.shadow.Proxy {
- Shadow shadow
+ boolean request()
}
interface sae101.decorateur.IRender {
+ void render()
}
class sae101.triplet.Point {
- Triplet coor
+ Triplet getCoor()
+ void setCoor(Triplet)
+ Vector sub(Point)
+ Point multiply(double)
+ String toString()
}
class sae101.decorateur.LambertRender {
}
abstract class sae101.parser.scene.SceneObjects {
- Color diffuseColor
- Color specularColor
- Color ambient
- int shininess
~ SceneBuilder sceneBuilder
+ Color getAmbient()
+ void setAmbient(Color)
+ Color getDiffuseColor()
+ Color getSpecularColor()
+ int getShininess()
+ void setDiffuseColor()
+ void setSpecularColor()
+ void setShininess(int)
}
class sae101.triplet.Triplet {
- double x
- double y
- double z
+ double getX()
+ void setX(double)
+ double getY()
+ void setY(double)
+ double getZ()
+ void setZ(double)
+ Triplet add(Triplet)
+ Triplet sub(Triplet)
+ Triplet multiply(double)
+ double scalarProduct(Triplet)
+ Triplet vectorProduct(Triplet)
+ Triplet schurProduct(Triplet)
+ double length()
+ Triplet normalize()
+ String toString()
}
class sae101.Main {
+ {static} void main(String[])
}
class sae101.triplet.Vector {
- Triplet coor
+ Triplet getCoor()
+ void setCoor(Triplet)
+ Point add(Point)
+ Vector add(Vector)
+ Vector sub(Vector)
+ Vector multiply(double)
+ double scalarProduct(Vector)
+ Vector vectorProduct(Vector)
+ double length()
+ Vector normalize()
+ String toString()
}
class sae101.parser.objects.Plane {
- Vector normal
- Point positionPoint
+ Point caclulP(Vector,Triplet)
}
class sae101.shadow.Shadow {
- SceneBuilder sceneBuilder
+ boolean request()
}
class sae101.triplet.Color {
- Triplet coor
+ Triplet getCoor()
+ void setCoor(Triplet)
+ Color add(Color)
+ Color multiply(double)
+ Color schurProduct(Color)
+ String toString()
}


sae101.decorateur.IRender <|.. sae101.decorateur.DecoRender
sae101.calculColor.IFormLambert <|.. sae101.calculColor.BlinnPhongColorCal
sae101.parser.light.Light <|-- sae101.parser.light.DirectionalLight
sae101.parser.scene.SceneObjects <|-- sae101.parser.objects.Sphere
sae101.parser.scene.Builder <|.. sae101.parser.scene.SceneBuilder
sae101.parser.scene.SceneObjects <|-- sae101.parser.objects.Triangle
sae101.parser.light.Light <|-- sae101.parser.light.PointLight
sae101.calculColor.IFormLambert <|.. sae101.calculColor.LambertColorCal
sae101.calculColor.IFormLambert <|.. sae101.calculColor.BaseColorCal
sae101.shadow.IShadow <|.. sae101.shadow.Proxy
sae101.decorateur.DecoRender <|-- sae101.decorateur.LambertRender
sae101.parser.scene.SceneObjects <|-- sae101.parser.objects.Plane
sae101.shadow.IShadow <|.. sae101.shadow.Shadow
@enduml